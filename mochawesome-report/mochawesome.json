{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-20T15:57:59.276Z",
    "end": "2022-11-20T15:58:04.809Z",
    "duration": 5533,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ca2279d0-b0fd-4e12-9266-a0101e503d02",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "317be47f-f1f6-430c-9879-527dcff96990",
          "title": "POST /authaccount/registration",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\1userRegistration.js",
          "file": "\\test\\1userRegistration.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfull register a user",
              "fullTitle": "POST /authaccount/registration successfull register a user",
              "timedOut": false,
              "duration": 537,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request\n      .post(\"/authaccount/registration\")\n      .send({\n        \"name\": registerAccountSuccess.name,\n        \"email\": registerAccountSuccess.email,\n        \"password\": registerAccountSuccess.password\n      });\n    // Get Response Data and save to json\n    const responseData = JSON.parse(response.text);\n    writeFile(\"email\", responseData.data.Email);\n    expect(response.status).to.eql(200);\n    expect(response.body.data.Name).to.eql(registerAccountSuccess.name);\n    expect(response.body.data.Email).to.eql(registerAccountSuccess.email);\n    should.exist(response.body.data.Token);",
              "err": {},
              "uuid": "f9c0693d-a2e4-4bb4-83cb-1c9392eb6f94",
              "parentUUID": "317be47f-f1f6-430c-9879-527dcff96990",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "an email is already registered",
              "fullTitle": "POST /authaccount/registration an email is already registered",
              "timedOut": false,
              "duration": 548,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .post(\"/authaccount/registration\")\n      .send({\n        \"name\": registerAccountSuccess.name,\n        \"email\": file.data.email,\n        \"password\": registerAccountSuccess.password\n      });\n    expect(response.status).to.eql(200);\n    expect(response.body.code).to.eql(1);\n    expect(response.body.message).to.eql(\"The email address you have entered is already registered\");\n    should.not.exist(response.body.data);",
              "err": {},
              "uuid": "14a35c92-f775-43a1-853d-64af02038621",
              "parentUUID": "317be47f-f1f6-430c-9879-527dcff96990",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9c0693d-a2e4-4bb4-83cb-1c9392eb6f94",
            "14a35c92-f775-43a1-853d-64af02038621"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1085,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a966803c-b9a7-43a9-a837-4e8ddf028205",
          "title": "POST /authaccount/login",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\2userLogin.js",
          "file": "\\test\\2userLogin.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully login",
              "fullTitle": "POST /authaccount/login successfully login",
              "timedOut": false,
              "duration": 501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .post(\"/authaccount/login\")\n      .send({\n        \"email\": file.data.email,\n        \"password\": 123456\n      });\n    // Get Response Data and save to json\n    const responseData = JSON.parse(response.text);\n    writeFile(\"token\", responseData.data.Token);\n    writeFile(\"id\", responseData.data.Id);\n    expect(response.status).to.eql(200);\n    expect(response.body.code).to.eql(0);\n    expect(response.body.data.Email).to.eql(file.data.email);\n    should.exist(response.body.data['Id']);\n    should.exist(response.body.data['Token']);",
              "err": {},
              "uuid": "c83816dc-65ae-43b1-afdd-a18f11a13f96",
              "parentUUID": "a966803c-b9a7-43a9-a837-4e8ddf028205",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "login with wrong password",
              "fullTitle": "POST /authaccount/login login with wrong password",
              "timedOut": false,
              "duration": 500,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .post(\"/authaccount/login\")\n      .send({\n        \"email\": file.data.email,\n        \"password\": 112233\n      });\n    expect(response.status).to.eql(200);\n    expect(response.body.code).to.eql(1);\n    expect(response.body.message).to.eql(\"invalid username or password\");\n    should.not.exist(response.body.data);",
              "err": {},
              "uuid": "23f54463-2f1c-4fdf-9a69-de8befbac047",
              "parentUUID": "a966803c-b9a7-43a9-a837-4e8ddf028205",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c83816dc-65ae-43b1-afdd-a18f11a13f96",
            "23f54463-2f1c-4fdf-9a69-de8befbac047"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1001,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cf009847-211b-428a-baf6-4257b91f08ca",
          "title": "GET /users",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\3usersGetAllUser.js",
          "file": "\\test\\3usersGetAllUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully get all users",
              "fullTitle": "GET /users successfully get all users",
              "timedOut": false,
              "duration": 583,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .get(`/users?page=${page}`)\n      .set('Authorization',`bearer ${file.data.token}`);\n    expect(response.status).to.eql(200);\n    expect(response.body.page).to.eql(page);\n    expect(response.body.data.length).to.eql(response.body['per_page']);\n    should.exist(response.body.data);",
              "err": {},
              "uuid": "3ac8ceec-f167-46cc-8c14-29e967a1b14f",
              "parentUUID": "cf009847-211b-428a-baf6-4257b91f08ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get users without authorization",
              "fullTitle": "GET /users get users without authorization",
              "timedOut": false,
              "duration": 485,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request\n      .get(`/users?page=${page}`);\n    expect(response.status).to.eql(401);\n    expect(response.body).to.contain(\"please send bearer token in header\");",
              "err": {},
              "uuid": "a0547aa5-40ee-4013-8cf5-23505e13600b",
              "parentUUID": "cf009847-211b-428a-baf6-4257b91f08ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3ac8ceec-f167-46cc-8c14-29e967a1b14f",
            "a0547aa5-40ee-4013-8cf5-23505e13600b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1068,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1f6f0599-81bc-49a5-b745-c9aca1dd9e56",
          "title": "GET /users/{id}",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\4usersHandleUserById.js",
          "file": "\\test\\4usersHandleUserById.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully get user by id",
              "fullTitle": "GET /users/{id} successfully get user by id",
              "timedOut": false,
              "duration": 557,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .get(`/users/${file.data.id}`)\n      .set('Authorization',`bearer ${file.data.token}`);\n    expect(response.status).to.eql(200);\n    expect(response.body.id).to.eql(file.data.id);\n    expect(response.body.email).to.eql(file.data.email);\n    should.exist(response.body.id);\n    should.exist(response.body.email);",
              "err": {},
              "uuid": "fd4f1ffd-36a4-41ca-a421-9151149574f7",
              "parentUUID": "1f6f0599-81bc-49a5-b745-c9aca1dd9e56",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid request of get user by id",
              "fullTitle": "GET /users/{id} invalid request of get user by id",
              "timedOut": false,
              "duration": 581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .get(`/users/parys410`)\n      .set('Authorization',`bearer ${file.data.token}`);\n    expect(response.status).to.eql(400);\n    expect(response.body.Message).to.contains(\"The request is invalid\");",
              "err": {},
              "uuid": "0c6cb991-be47-4d57-9954-17a21a7f42bf",
              "parentUUID": "1f6f0599-81bc-49a5-b745-c9aca1dd9e56",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fd4f1ffd-36a4-41ca-a421-9151149574f7",
            "0c6cb991-be47-4d57-9954-17a21a7f42bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1ba66def-c81b-44e2-b854-65837fcfab60",
          "title": "POST /users",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\4usersHandleUserById.js",
          "file": "\\test\\4usersHandleUserById.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully create a new user",
              "fullTitle": "POST /users successfully create a new user",
              "timedOut": false,
              "duration": 702,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\nconst file = readFile();\n/* Set New User Data */\nconst newUser = {\n  name:\"Setiyawan\",\n  email:\"parys\"+ getRandomNumber() +\"@gmail.com\",\n  location:\"INDONESIA\"\n};\nconst response = await request\n  .post(`/users`)\n  .set('Authorization',`bearer ${file.data.token}`)\n  .send({\n    \"name\": newUser.name,\n    \"email\": newUser.email,\n    \"location\": newUser.location\n  });\n// Get Response Data and save to json\nconst responseData = JSON.parse(response.text);\nwriteFile(\"newID\", responseData.id);\nexpect(response.status).to.eql(201);\nexpect(response.body.name).to.eql(newUser.name);\nexpect(response.body.email).to.eql(newUser.email);\nexpect(response.body.location).to.eql(newUser.location);\nshould.exist(response.body.id);",
              "err": {},
              "uuid": "029adbc5-134a-435c-9d45-fbb2da1c359a",
              "parentUUID": "1ba66def-c81b-44e2-b854-65837fcfab60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "failed to create a new user with existing email",
              "fullTitle": "POST /users failed to create a new user with existing email",
              "timedOut": false,
              "duration": 517,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\nconst file = readFile();\n/* Set New User Data */\nconst newUser = {\n  name:\"Setiyawan\",\n  email: file.data.email,\n  location:\"INDONESIA\"\n};\nconst response = await request\n  .post(`/users`)\n  .set('Authorization',`bearer ${file.data.token}`)\n  .send({\n    \"name\": newUser.name,\n    \"email\": newUser.email,\n    \"location\": newUser.location\n  });\nexpect(response.status).to.eql(400);\nexpect(response.body.Message).to.contains(\"try with different email address\");\nshould.exist(response.body.Message);",
              "err": {},
              "uuid": "e941c7bb-fc0a-41f2-84bb-c2b4e67d2fe2",
              "parentUUID": "1ba66def-c81b-44e2-b854-65837fcfab60",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "029adbc5-134a-435c-9d45-fbb2da1c359a",
            "e941c7bb-fc0a-41f2-84bb-c2b4e67d2fe2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1219,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}