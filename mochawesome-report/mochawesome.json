{
  "stats": {
    "suites": 4,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-20T15:38:27.461Z",
    "end": "2022-11-20T15:38:31.833Z",
    "duration": 4372,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eaa590aa-e92d-4891-86fb-14288ee4022e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d2fcf92e-19a1-4eb7-8d36-b097ba8353de",
          "title": "POST /authaccount/registration",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\1userRegistration.js",
          "file": "\\test\\1userRegistration.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfull register a user",
              "fullTitle": "POST /authaccount/registration successfull register a user",
              "timedOut": false,
              "duration": 546,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request\n      .post(\"/authaccount/registration\")\n      .send({\n        \"name\": registerAccountSuccess.name,\n        \"email\": registerAccountSuccess.email,\n        \"password\": registerAccountSuccess.password\n      });\n    // Get Response Data and save to json\n    const responseData = JSON.parse(response.text);\n    writeFile(\"email\", responseData.data.Email);\n    expect(response.status).to.eql(200);\n    expect(response.body.data.Name).to.eql(registerAccountSuccess.name);\n    expect(response.body.data.Email).to.eql(registerAccountSuccess.email);\n    should.exist(response.body.data.Token);",
              "err": {},
              "uuid": "832fb4da-9bbd-4b26-a85a-a246a000299c",
              "parentUUID": "d2fcf92e-19a1-4eb7-8d36-b097ba8353de",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "an email is already registered",
              "fullTitle": "POST /authaccount/registration an email is already registered",
              "timedOut": false,
              "duration": 564,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .post(\"/authaccount/registration\")\n      .send({\n        \"name\": registerAccountSuccess.name,\n        \"email\": file.data.email,\n        \"password\": registerAccountSuccess.password\n      });\n    expect(response.status).to.eql(200);\n    expect(response.body.code).to.eql(1);\n    expect(response.body.message).to.eql(\"The email address you have entered is already registered\");\n    should.not.exist(response.body.data);",
              "err": {},
              "uuid": "102aa7f2-ebde-4b5b-a229-0f68e9eb5797",
              "parentUUID": "d2fcf92e-19a1-4eb7-8d36-b097ba8353de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "832fb4da-9bbd-4b26-a85a-a246a000299c",
            "102aa7f2-ebde-4b5b-a229-0f68e9eb5797"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "01608fe9-bea4-4f5a-8cff-179ce4858bbb",
          "title": "POST /authaccount/login",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\2userLogin.js",
          "file": "\\test\\2userLogin.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully login",
              "fullTitle": "POST /authaccount/login successfully login",
              "timedOut": false,
              "duration": 526,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .post(\"/authaccount/login\")\n      .send({\n        \"email\": file.data.email,\n        \"password\": 123456\n      });\n    // Get Response Data and save to json\n    const responseData = JSON.parse(response.text);\n    writeFile(\"token\", responseData.data.Token);\n    writeFile(\"id\", responseData.data.Id);\n    expect(response.status).to.eql(200);\n    expect(response.body.code).to.eql(0);\n    expect(response.body.data.Email).to.eql(file.data.email);\n    should.exist(response.body.data['Id']);\n    should.exist(response.body.data['Token']);",
              "err": {},
              "uuid": "1ee69d21-a516-4eda-a447-02d18b1efacb",
              "parentUUID": "01608fe9-bea4-4f5a-8cff-179ce4858bbb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "login with wrong password",
              "fullTitle": "POST /authaccount/login login with wrong password",
              "timedOut": false,
              "duration": 558,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .post(\"/authaccount/login\")\n      .send({\n        \"email\": file.data.email,\n        \"password\": 112233\n      });\n    expect(response.status).to.eql(200);\n    expect(response.body.code).to.eql(1);\n    expect(response.body.message).to.eql(\"invalid username or password\");\n    should.not.exist(response.body.data);",
              "err": {},
              "uuid": "194b3efb-9a8b-4b22-9f59-7f1447710e61",
              "parentUUID": "01608fe9-bea4-4f5a-8cff-179ce4858bbb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1ee69d21-a516-4eda-a447-02d18b1efacb",
            "194b3efb-9a8b-4b22-9f59-7f1447710e61"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1084,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "627edb6f-c467-4d23-9f42-8a4723d9d7da",
          "title": "GET /users",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\3usersGetAllUser.js",
          "file": "\\test\\3usersGetAllUser.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully get all users",
              "fullTitle": "GET /users successfully get all users",
              "timedOut": false,
              "duration": 600,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .get(`/users?page=${page}`)\n      .set('Authorization',`bearer ${file.data.token}`);\n    expect(response.status).to.eql(200);\n    expect(response.body.page).to.eql(page);\n    expect(response.body.data.length).to.eql(response.body['per_page']);\n    should.exist(response.body.data);",
              "err": {},
              "uuid": "f91d5b95-66cb-4b48-a967-36ee7a9ca78d",
              "parentUUID": "627edb6f-c467-4d23-9f42-8a4723d9d7da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get users without authorization",
              "fullTitle": "GET /users get users without authorization",
              "timedOut": false,
              "duration": 538,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request\n      .get(`/users?page=${page}`);\n    expect(response.status).to.eql(401);\n    expect(response.body).to.contain(\"please send bearer token in header\");",
              "err": {},
              "uuid": "3fbdc816-45bc-4050-8272-683d2156881a",
              "parentUUID": "627edb6f-c467-4d23-9f42-8a4723d9d7da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f91d5b95-66cb-4b48-a967-36ee7a9ca78d",
            "3fbdc816-45bc-4050-8272-683d2156881a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1138,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0f05f279-0e07-41d5-85e6-73cbd5b2e98f",
          "title": "GET /users/{id}",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\4usersHandleUserById.js",
          "file": "\\test\\4usersHandleUserById.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully get user by id",
              "fullTitle": "GET /users/{id} successfully get user by id",
              "timedOut": false,
              "duration": 518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .get(`/users/${file.data.id}`)\n      .set('Authorization',`bearer ${file.data.token}`);\n    expect(response.status).to.eql(200);\n    expect(response.body.id).to.eql(file.data.id);\n    expect(response.body.email).to.eql(file.data.email);\n    should.exist(response.body.id);\n    should.exist(response.body.email);",
              "err": {},
              "uuid": "606e3cae-d472-4c09-9619-d213e7c611a6",
              "parentUUID": "0f05f279-0e07-41d5-85e6-73cbd5b2e98f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "invalid request of get user by id",
              "fullTitle": "GET /users/{id} invalid request of get user by id",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .get(`/users/parys410`)\n      .set('Authorization',`bearer ${file.data.token}`);\n    expect(response.status).to.eql(400);\n    expect(response.body.Message).to.contains(\"The request is invalid\");",
              "err": {},
              "uuid": "d3274e80-8105-4c0b-8141-f54e872b23f0",
              "parentUUID": "0f05f279-0e07-41d5-85e6-73cbd5b2e98f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "606e3cae-d472-4c09-9619-d213e7c611a6",
            "d3274e80-8105-4c0b-8141-f54e872b23f0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1026,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}