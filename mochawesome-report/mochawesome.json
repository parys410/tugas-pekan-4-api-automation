{
  "stats": {
    "suites": 6,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-25T03:49:24.982Z",
    "end": "2022-11-25T03:49:39.285Z",
    "duration": 14303,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "64d4b15a-036a-4407-b66a-7b2c85b3c277",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3deec4fe-1864-4122-9bb2-459bb614e589",
          "title": "POST /auth",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\1authCreateToken.js",
          "file": "\\test\\1authCreateToken.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfull get a token",
              "fullTitle": "POST /auth successfull get a token",
              "timedOut": false,
              "duration": 1639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request\n      .post(\"/auth\")\n      .set(\"Content-Type\", \"application/json\")\n      .send({\n        \"username\": credential.username,\n        \"password\": credential.password\n      });\n    // Get Response Data and save to json\n    const responseData = JSON.parse(response.text);\n    writeFile(\"token\", responseData.token);\n    expect(response.status).to.eql(200);\n    should.exist(response.body.token);",
              "err": {},
              "uuid": "b2713e6f-98e2-45a2-9f01-d81e5670e58d",
              "parentUUID": "3deec4fe-1864-4122-9bb2-459bb614e589",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b2713e6f-98e2-45a2-9f01-d81e5670e58d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1639,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "79139535-f0ba-4736-9dbc-ae419555a07a",
          "title": "POST /booking",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\2bookingCreate.js",
          "file": "\\test\\2bookingCreate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfull create a booking",
              "fullTitle": "POST /booking successfull create a booking",
              "timedOut": false,
              "duration": 1494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request\n      .post(\"/booking\")\n      .set(\"Content-Type\", \"application/json\")\n      .set(\"Accept\", \"application/json\")\n      .send({\n        \"firstname\" : bookingData.firstname,\n        \"lastname\" : bookingData.lastname,\n        \"totalprice\" : bookingData.totalprice,\n        \"depositpaid\" : bookingData.depositpaid,\n        \"bookingdates\" : {\n            \"checkin\" : bookingData.bookingdates.checkin,\n            \"checkout\" : bookingData.bookingdates.checkout\n        },\n        \"additionalneeds\" : bookingData.additionalneeds\n    });\n    // Get Response Data and save to json\n    const responseData = JSON.parse(response.text);\n    writeFile(\"bookingid\", responseData.bookingid);\n    expect(response.status).to.eql(200);\n    expect(response.body.booking.firstname).to.eql(bookingData.firstname);\n    expect(response.body.booking.lastname).to.eql(bookingData.lastname);\n    expect(response.body.booking.totalprice).to.eql(bookingData.totalprice);\n    should.exist(response.body.bookingid);",
              "err": {},
              "uuid": "335f2d7c-3f46-4976-b9aa-731238603578",
              "parentUUID": "79139535-f0ba-4736-9dbc-ae419555a07a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "335f2d7c-3f46-4976-b9aa-731238603578"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1494,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "65cdc548-b413-4be5-bc35-ea6f948036ad",
          "title": "GET /booking/{id}",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\3bookingGetBookingById.js",
          "file": "\\test\\3bookingGetBookingById.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfull get a booking by id",
              "fullTitle": "GET /booking/{id} successfull get a booking by id",
              "timedOut": false,
              "duration": 1480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .get(`/booking/${file.data.bookingid}`)\n      .set(\"Accept\", \"application/json\");\n    expect(response.status).to.eql(200);\n    expect(response.body).to.eql(bookingData);",
              "err": {},
              "uuid": "74267819-9783-455b-9109-7b327aecd1d8",
              "parentUUID": "65cdc548-b413-4be5-bc35-ea6f948036ad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccessfull get a booking by wrong id",
              "fullTitle": "GET /booking/{id} unsuccessfull get a booking by wrong id",
              "timedOut": false,
              "duration": 1517,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request\n      .get(`/booking/abcde`)\n      .set(\"Accept\", \"application/json\");\n    expect(response.status).to.eql(404);\n    expect(response.text).to.contains(\"Not Found\");",
              "err": {},
              "uuid": "14e7d279-c18a-44be-81d2-6ca683b9d25f",
              "parentUUID": "65cdc548-b413-4be5-bc35-ea6f948036ad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "74267819-9783-455b-9109-7b327aecd1d8",
            "14e7d279-c18a-44be-81d2-6ca683b9d25f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2997,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "9ec93599-33b6-4059-9493-85efd9f975a6",
          "title": "PUT /booking/{id}",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\4bookingUpdateBookingById.js",
          "file": "\\test\\4bookingUpdateBookingById.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfull update a booking",
              "fullTitle": "PUT /booking/{id} successfull update a booking",
              "timedOut": false,
              "duration": 1476,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\nconst file = readFile();\nconst response = await request\n  .put(`/booking/${file.data.bookingid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"Accept\", \"application/json\")\n  .set(\"Cookie\", `token=${file.data.token}`)\n  .send({\n    \"firstname\" : bookingData.firstname,\n    \"lastname\" : bookingData.lastname,\n    \"totalprice\" : bookingData.totalprice,\n    \"depositpaid\" : bookingData.depositpaid,\n    \"bookingdates\" : {\n        \"checkin\" : bookingData.bookingdates.checkin,\n        \"checkout\" : bookingData.bookingdates.checkout\n    },\n    \"additionalneeds\" : bookingData.additionalneeds\n});\nexpect(response.status).to.eql(200);\nexpect(response.body).to.eql(bookingData);",
              "err": {},
              "uuid": "79334ea7-25f3-47c6-98a9-3b8fcae0d2f9",
              "parentUUID": "9ec93599-33b6-4059-9493-85efd9f975a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccessfull update a booking by empty token",
              "fullTitle": "PUT /booking/{id} unsuccessfull update a booking by empty token",
              "timedOut": false,
              "duration": 1437,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\nconst file = readFile();\nconst response = await request\n  .put(`/booking/${file.data.bookingid}`)\n  .set(\"Content-Type\", \"application/json\")\n  .set(\"Accept\", \"application/json\")\n  .set(\"Cookie\", `token=`)\n  .send({\n    \"firstname\" : bookingData.firstname,\n    \"lastname\" : bookingData.lastname,\n    \"totalprice\" : bookingData.totalprice,\n    \"depositpaid\" : bookingData.depositpaid,\n    \"bookingdates\" : {\n        \"checkin\" : bookingData.bookingdates.checkin,\n        \"checkout\" : bookingData.bookingdates.checkout\n    },\n    \"additionalneeds\" : bookingData.additionalneeds\n});\nexpect(response.status).to.eql(403);\nexpect(response.text).to.contain(\"Forbidden\");",
              "err": {},
              "uuid": "17a5385f-182b-41eb-8cb7-83ee3f9a4561",
              "parentUUID": "9ec93599-33b6-4059-9493-85efd9f975a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "79334ea7-25f3-47c6-98a9-3b8fcae0d2f9",
            "17a5385f-182b-41eb-8cb7-83ee3f9a4561"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2913,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "03455489-f712-4384-b7aa-7e09c16a91ca",
          "title": "GET /booking/{id}",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\5bookingGetBookingByIdAfterUpdate.js",
          "file": "\\test\\5bookingGetBookingByIdAfterUpdate.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfull get a booking by id after update",
              "fullTitle": "GET /booking/{id} successfull get a booking by id after update",
              "timedOut": false,
              "duration": 1598,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .get(`/booking/${file.data.bookingid}`)\n      .set(\"Accept\", \"application/json\");\n    expect(response.status).to.eql(200);\n    expect(response.body).to.eql(bookingData);",
              "err": {},
              "uuid": "4a982ee6-63cd-48d0-9386-904ce33a28d9",
              "parentUUID": "03455489-f712-4384-b7aa-7e09c16a91ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccessfull get a booking by wrong id",
              "fullTitle": "GET /booking/{id} unsuccessfull get a booking by wrong id",
              "timedOut": false,
              "duration": 1441,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request\n      .get(`/booking/abcde`)\n      .set(\"Accept\", \"application/json\");\n    expect(response.status).to.eql(404);\n    expect(response.text).to.contains(\"Not Found\");",
              "err": {},
              "uuid": "c0ed56b1-db55-42be-819a-2dd4a9685643",
              "parentUUID": "03455489-f712-4384-b7aa-7e09c16a91ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4a982ee6-63cd-48d0-9386-904ce33a28d9",
            "c0ed56b1-db55-42be-819a-2dd4a9685643"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3039,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "71a49cff-d53a-438d-a3b1-ef973b789325",
          "title": "DELETE /booking/{id}",
          "fullFile": "C:\\QA\\Tugas Pekan 4 - API Automation\\test\\6bookingDelBookingById.js",
          "file": "\\test\\6bookingDelBookingById.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfull delete a booking by id",
              "fullTitle": "DELETE /booking/{id} successfull delete a booking by id",
              "timedOut": false,
              "duration": 1107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\n    const file = readFile();\n    const response = await request\n      .delete(`/booking/${file.data.bookingid}`)\n      .set(\"Cookie\", `token=${file.data.token}`)\n      .set(\"Content-Type\", \"application/json\");\n    expect(response.status).to.eql(201);\n    expect(response.text).to.contain(\"Created\");",
              "err": {},
              "uuid": "a5447d11-c339-456d-a4d4-5d686e45e421",
              "parentUUID": "71a49cff-d53a-438d-a3b1-ef973b789325",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "unsuccessfull delete a booking by wrong id",
              "fullTitle": "DELETE /booking/{id} unsuccessfull delete a booking by wrong id",
              "timedOut": false,
              "duration": 1090,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "/* Read Json File First */\nconst file = readFile();\nconst response = await request\n  .delete(`/booking/abcde`)\n  .set(\"Cookie\", `token=${file.data.token}`)\n  .set(\"Content-Type\", \"application/json\");\nexpect(response.status).to.eql(405);\nexpect(response.text).to.contains(\"Method Not Allowed\");",
              "err": {},
              "uuid": "eebaece0-88df-41f2-829c-9d44a4c0ed8f",
              "parentUUID": "71a49cff-d53a-438d-a3b1-ef973b789325",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5447d11-c339-456d-a4d4-5d686e45e421",
            "eebaece0-88df-41f2-829c-9d44a4c0ed8f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2197,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}